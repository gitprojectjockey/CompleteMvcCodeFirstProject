@*Here we are using the PagedList.mvc helper and PageList.css to quickly enable paging over students collection*@
@*The page specifies that the view now gets a PagedList object instead of a List object.*@
@model PagedList.IPagedList<ContosoWebUI.Models.Student>
@using PagedList.Mvc;

<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewBag.Title = "Students";
}

<h2>Students</h2>

<p>
    @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-default" })
</p>

@*Search value submit*@
@*The default BeginForm submits form data with a POST, which means that parameters are passed in the HTTP message body and not in the
    URL as query strings. When you specify HTTP GET, the form data is passed in the URL as query strings, which enables users to bookmark
    the URL. The W3C guidelines for the use of HTTP GET recommend that you should use GET when the action does not result in an update.*@
@using (Html.BeginForm("Index", "Student", FormMethod.Get))
{
    <div class="form-group form-inline">
        <h5>Find by name:</h5>
        @Html.TextBox("SearchString", ViewBag.CurrentFilter as string, new {@class="form-control", placeholder = "Search Value" })
        <input type="submit" value="Search" , class="btn btn-default form-control" />
    </div>
}


@*Viewbag and action links addded to allow for sorting*@
<table class="table">
    <tr>
        <th>
            @Html.ActionLink("Last Name", "Index", new { sortOrder = ViewBag.NameSortParm })
        </th>
        <th>
            First Name
        </th>
        <th>
            @Html.ActionLink("Enrollment Date", "Index", new { sortOrder = ViewBag.DateSortParm })
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.LastName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FirstMidName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EnrollmentDate)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", null, new { id = item.ID }, new { @class = "btn btn-default btn-xs" }) |
                @Html.ActionLink("Details","Details", null, new { id = item.ID }, new { @class = "btn btn-default btn-xs" }) |
                @Html.ActionLink("Delete", "Delete", null, new { id = item.ID }, new { @class = "btn btn-default btn-xs" })
            </td>
        </tr>
    }
</table>
<br />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
